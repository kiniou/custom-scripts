#!/usr/bin/env python2
# -*- coding: utf-8 -*-

#
#    mysql_backup - some wrapper script around mysqldump to backup database
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Copyright (C) 2014 Kevin Roy <kiniou@gmail.com>

import os
import sys
from pprint import pprint

from docopt import docopt

from datetime import datetime
import subprocess
__doc__ = """
Usage:
    mysql_backup <mysql.cnf> <database> [--tables=table] [-- <options>...]

"""

if __name__ == "__main__":
    args = docopt(__doc__, options_first=False)
    pprint(args)
    tablename = "full"
    if args['--tables'] is not None:
        tablename = args['--tables']

    table =""
    if tablename is not 'full':
        table = tablename

    config = args['<mysql.cnf>']

    filename = "{0}_{1:%Y-%m-%d}.{2}.mysql".format(args['<database>'], datetime.now(), tablename)
    #print filename
    final_filename = filename
    n = -1
    while os.path.exists(final_filename) :
        n += 1
        final_filename = "{0}.{1}".format(filename, n)

    cmd = [
        'mysqldump',
        '--defaults-extra-file={0}'.format(config),
        '--extended-insert=TRUE','--complete-insert=TRUE',
        '--delayed-insert'
    ] + args['<options>'] + [
        args['<database>']
    ]
    if args['--tables'] is not None:
        cmd += [args['--tables']]
    pprint(cmd)
    print(final_filename)

    with open(final_filename, 'w+') as dumpfile:
        subprocess.call(cmd, stdout=dumpfile)
    sys.exit(0)
